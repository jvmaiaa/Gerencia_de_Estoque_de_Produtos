<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.com</groupId>
	<artifactId>gerecia-estoque</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Gerencia de estoque</name>
	<description>Projeto que tem como principal objetivo, realizar a gerência do estoque de produtos</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer>
			<name>João Victor Maia</name>
			<url> https://github.com/jvmaiaa?tab=repositories</url>
		</developer>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url> https://www.linkedin.com/in/joão-víctor-maia-4b9961265/ </url>
	</scm>
	<properties>
		<java.version>21</java.version>
		<mapstruct.version>1.5.5.Final</mapstruct.version>
		<lombok.version>1.18.36</lombok.version>
		<instancio.version>5.4.0</instancio.version>
	</properties>
	<dependencies>

		<!-- Suporte ao JPA e Hibernate para manipulação de dados no banco -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- Sobe o servidor e permite criar endpoints HTTP -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Fornece ferramentas para testes automatizados -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Facilita a criação de links e navegação em APIs -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>

		<!-- Valida dados de entrada automaticamente -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- Driver para conectar ao banco de dados PostgreSQL -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Permite que mudanças sejam aplicadas sem reestartar a aplicação -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Usado para criar um banco de dados em memória para testes -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Usado para códigos boilerplate -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Gerencia migrações de banco de dados -->
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>

		<!-- Suporte ao Flyway com PostgreSQL -->
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-database-postgresql</artifactId>
		</dependency>

		<!-- MapStruct -->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>

		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${mapstruct.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Segurança com autenticação e autorização -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency> -->

		<!-- Ferramentas para testes de segurança -->
		<!-- <dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency> -->

		<!-- Gera objetos com dados aleatórios para facilitar testes unitários -->
		<dependency>
			<groupId>org.instancio</groupId>
			<artifactId>instancio-core</artifactId>
			<version>${instancio.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Integra o Instancio com JUnit para melhorar a geração automática de dados nos testes -->
		<dependency>
			<groupId>org.instancio</groupId>
			<artifactId>instancio-junit</artifactId>
			<version>${instancio.version}</version>
			<scope>test</scope>
		</dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

    </dependencies>

	<build>
		<plugins>
			<!-- Plugin do Spring Boot -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- Plugin para suporte ao MapStruct e Lombok -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
					</annotationProcessorPaths>
					<compilerArgs>
						<arg>-Amapstruct.defaultComponentModel=spring</arg>
						<arg>-Amapstruct.unmappedTargetPolicy=IGNORE</arg>
					</compilerArgs>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
